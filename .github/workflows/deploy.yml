name: deploy
on:
  push:
    branches: [main]
jobs:
  build-and-deploy:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        node-version: [18.16.0]

    steps:
      - name: ✅ 체크아웃 source code.
        uses: actions/checkout@v3

      - name: ⚙️ ${{ matrix.node-version }} 버전의 노드로 세팅합니다.
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: ⚙️ 환경변수 설정
        working-directory: ./
        run: |
          touch .env
          echo DB_USER= ${{ secrets.DB_USER }}>> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }}>>.env
          echo JWT_SECRET=${{secrets.JWT_SECRET}}>>.env
          echo AWS_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY_ID}} >>.env
          echo AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}} >>.env
          echo AWS_S3_BUCKET_NAME=${{secrets.AWS_S3_BUCKET_NAME}} >>.env
      - name: ✨ 패키지 설치
        working-directory: ./
        run: npm install

      - name: 🐋 Docker-compose 준비
        working-directory: ./
        run: |
          docker-compose up -d

      - name: ⏰mysql 도커 기다리기
        run: |
          until docker exec mySQLContainer mysqladmin ping -P 3306 -u root -p$DB_PASSWORD | grep "mysqld is alive" ; do
          >&2 echo "MySQL is unavailable - waiting for it... "
          sleep 1
          done

      - name: ✅테스트 수행
        working-directory: ./
        run: |
          npm run unitTest
          npx jest --runInBand --setupFiles dotenv/config

      - name: 🐋 Docker-compose Down
        working-directory: ./
        run: docker-compose down

      - name: ✨ 빌드
        working-directory: ./
        run: npm run build

      - name: 📦 빌드한 코드를 압축
        run: zip -r friending.zip ./build ./scripts ./appspec.yml ./.env ./package.json

      - name: 🌎 AWS에 접속
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: 🦖 S3에 압축된 서버 코드를 업로드
        run: aws s3 cp --region ap-northeast-2 ./friending.zip s3://friending-deploy-bucket/deploy/

      - name: 🚀 AWS codeDeploy로 배포를 시작
        run: aws deploy create-deployment
          --application-name friending-codedeploy
          --deployment-config-name CodeDeployDefault.OneAtATime
          --deployment-group-name dev
          --s3-location bucket=friending-deploy-bucket,bundleType=zip,key=deploy/friending.zip
